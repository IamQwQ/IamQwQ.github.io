<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://IamQwQ.github.io</id>
    <title>巨兽的多面体空间</title>
    <updated>2020-12-27T20:13:49.988Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://IamQwQ.github.io"/>
    <link rel="self" href="https://IamQwQ.github.io/atom.xml"/>
    <subtitle>暂时使用模板来写文
会努力来脱离模板的</subtitle>
    <logo>https://IamQwQ.github.io/images/avatar.png</logo>
    <icon>https://IamQwQ.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 巨兽的多面体空间</rights>
    <entry>
        <title type="html"><![CDATA[「Java」面向对象&面向过程的理解]]></title>
        <id>https://IamQwQ.github.io/post/javaOOP/</id>
        <link href="https://IamQwQ.github.io/post/javaOOP/">
        </link>
        <updated>2020-12-27T20:10:43.000Z</updated>
        <content type="html"><![CDATA[<p>oop，Object Oriented Programming，面向对象编程 - 这是java中的核心思想，大部分人对java的描述中都会带有面向对象的字眼</p>
<p>但每次当我觉得理解之后使用举例来区别面向过程和面向对象的时候，通常会犯难，因为我发现我通常举着例子就把面向对象讲出了面向过程的特征</p>
<p>啊？等会，不会只有我不懂面向对象吧</p>
<figure data-type="image" tabindex="1"><img src="https://IamQwQ.github.io/post-images/1609100026342.jpg" alt="" loading="lazy"></figure>
<p>让我解惑的缘由是看到java相关的视频时顺便又看了一下该up主的面向对象视频</p>
<p>再去看视频复习面向对象的时候突然发现问题所在，面向对象是<strong>宏观</strong>上的思想，从需要实现什么功能开始，根据功能分成若干需要实现的类，但在类中去实际用代码实现的时候还是面向过程的，结论是：<strong>面向对象是包含面向过程的。</strong></p>
<p>面向对象是一种思考方式，&quot;万物皆对象，对象皆有类&quot;，我们先抽象出拥有&quot;方法&quot;和&quot;字段&quot;的类，并将该类new出一个该类的实例，这个过程就是面向对象思想的最好的体现</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「算法」种子 The Seed - 随机器原理]]></title>
        <id>https://IamQwQ.github.io/post/randomPrinciple/</id>
        <link href="https://IamQwQ.github.io/post/randomPrinciple/">
        </link>
        <updated>2020-11-27T18:31:10.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://IamQwQ.github.io/post-images/1606501946132.png" alt="" loading="lazy"><br>
当我想出这个标题时，其实我看到了NERvGEAR（（幻视 (SAO厨)，当然此处不是指SAO中的seed（；´д｀）ゞ</p>
<p>我们通常会在一些游戏中，特别是会随机生成地形的游戏中看见地图选项中的「种子」，这个种子用来制作伪随机数，而实际我们会发现，同一个种子生成的世界或是地形一定是相同的（刨除不兼容的问题和跨版本之间的不同）<br>
<img src="https://IamQwQ.github.io/post-images/1606501984178.png" alt="" loading="lazy"></p>
<blockquote>
<p>这就是种子的意义：使用相同的种子可以生成出多个相同的世界。</p>
</blockquote>
<p>种子到底是什么呢？种子是从何而起的呢？随机数又是如何根据种子来生成的呢？</p>
<p>如果细想就会发现，计算机理应无法产生一个真随机数，因为计算机是完全根据事先写好的函数进行有规律有逻辑的计算，他如何去产生一个随机数呢？</p>
<p>然而在现实中也难以实现一个「真正」的随机，或许真正的随机只存在于量子力学中。但无论如何计算机都需要一些随机数来满足功能的需要，所以如果无法创建一个随机数，就需要一些看起来像是随机数的东西来代替他。因为不是真正的随机数，所以我们暂且称他为伪随机数</p>
<blockquote>
<p>后来的思考：实际上最普通的物理模拟出的随机也足够&quot;随机&quot;了，比如不断的摇晃密闭的容器使其内部的骰子不断的与容器壁发生碰撞，不断的改变骰子的位置，从而让人们无法预知骰子最终落点的形态，虽然从本质上来说并不属于真正的随机...</p>
<p>等一下，让我们重新理解一下&quot;真正的随机&quot;，如果所有数据足够透明，且时间充足，是不会出现「随机」这一说法的，如果这样的说法难以令人信服的话，我们换个说法：所有的随机都来自于难以测算的数据和未知的原理和知识</p>
<p>所以任何人都难以推算和猜测的事件如果都不算真正的随机的话，那么&quot;真正的随机&quot;又应该是什么样子的呢？</p>
</blockquote>
<h6 id="这里先留个位置给感兴趣的题材随机">这里先留个位置给感兴趣的题材	「随机」</h6>
<h4 id="随机数是由确定的算法构成的">随机数是由确定的算法构成的</h4>
<p>伪随机数生成器（简称PRNG）最开始是由冯·诺依曼在1946年创造的，他的基本想法是从一个2s[^s为正整数]位的数开始，对其平方得到4s位数（不足4s位时高位补0），然后取其中间的2s位数作为下一个种子数，以此类推，得到一系列随机数，这种方法就是平方取中法</p>
<p>但他的随机数不论从什么种子数开始，随机序列最终都会进入循环序列，比如：</p>
<blockquote>
<p>8100,6100,4100，8100,6100,4100 ...</p>
</blockquote>
<p>这是因为序列的下一个种子是非常依赖前一个数字的结果的函数，上面的重复循环问题是不能够避免的</p>
<p>所以：</p>
<blockquote>
<p>如果说这个循环间隔非常非常大，对实际应用并不会产生影响，那会怎样呢？</p>
<p>1949 年，数学家 D.H.Lehmer 利用<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Linear_congruential_generator">线性同余生成器（LCG）</a>实现了这一思路。</p>
</blockquote>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mo>(</mo><mi>a</mi><msub><mi>X</mi><mi>n</mi></msub><mo>+</mo><mi>c</mi><mo>)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">X_{n+1}=(aX_n+c)mod\ m
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">m</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">伪</mi><mi mathvariant="normal">随</mi><mi mathvariant="normal">机</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">列</mi><mspace linebreak="newline"></mspace><mi>m</mi><mo separator="true">,</mo><mn>0</mn><mo>&lt;</mo><mi>m</mi><mtext> </mtext><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">模</mi><mi mathvariant="normal">量</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo separator="true">,</mo><mn>0</mn><mo>&lt;</mo><mi>a</mi><mo>&lt;</mo><mi>m</mi><mtext> </mtext><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">乘</mi><mi mathvariant="normal">数</mi><mspace linebreak="newline"></mspace><mi>c</mi><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><mi>c</mi><mo>&lt;</mo><mi>m</mi><mtext> </mtext><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">增</mi><mi mathvariant="normal">量</mi><mspace linebreak="newline"></mspace><msub><mi>X</mi><mn>0</mn></msub><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><msub><mi>X</mi><mn>0</mn></msub><mo>&lt;</mo><mi>m</mi><mtext> </mtext><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">初</mi><mi mathvariant="normal">始</mi><mi mathvariant="normal">值</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">X是伪随机序列\\
m,0&lt;m \ 表示模量\\
a,0&lt;a&lt;m \ 表示乘数\\
c,0\leq c&lt;m \ 表示增量\\
X_0,0\leq X_0&lt;m \ 表示初始值\\
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">伪</span><span class="mord cjk_fallback">随</span><span class="mord cjk_fallback">机</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">列</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">量</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">数</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">增</span><span class="mord cjk_fallback">量</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">初</span><span class="mord cjk_fallback">始</span><span class="mord cjk_fallback">值</span></span><span class="mspace newline"></span></span></span></span></p>
<p>但同样的，虽然循环间隔十分之大，但还是有循环周期存在，如果要使线性同余生成器达到最大周期，应该符合以下的条件：</p>
<blockquote>
<ol>
<li>c，m互质</li>
<li>m的所有质因数都能够整除a-1</li>
<li>若m是4的倍数，a-1应也是</li>
<li>a，c，n都比m小</li>
<li>a，c是正整数</li>
</ol>
</blockquote>
<p>这样这种方法的重复区间可以达到2的31次方，这种方法大部分情况足够好用了，但仍不能够用于保密</p>
<p>当然这之后有很多的人去改进伪随机数生成器，以至于</p>
<blockquote>
<p>它的发展也直接导致了一段时间的 PRNG 野蛮创新时期。如果你回头看一下<a href="https://link.zhihu.com/?target=https%3A//www.google.com/search%3Ftbm%3Dpts%26hl%3Den%26q%3Drandom%2Bnumber%2Bgenerator">所有的随机数生成器的专利</a>，你可能会感受到就像现代版的第一次制造飞机的浪潮一样。</p>
</blockquote>
<p>人们进行各种尝试，其中也不乏厌倦了生成随机数所受限的条件的计算机科学家，比如</p>
<blockquote>
<p>来自 SGI 的一个团队发明了 LavaRand，它是用一个网络摄像头来对着熔岩灯拍照。从摄像头中过来的图片数据是一个真实的熵源——像图灵那样的真实随机数生成器（TRNG）——可以以 165kb/s 的速率生成随机数。</p>
</blockquote>
<p>再比如</p>
<blockquote>
<p>AutoDesk 的创始人 John Walker 在全世界范围内推广他的 <a href="https://link.zhihu.com/?target=http%3A//www.fourmilab.ch/hotbits/">HotBits</a>，这是一种“随机数即服务”的应用，背后原理是盖革计数器来保证其量子随机性。1998 年成立的 <a href="https://link.zhihu.com/?target=https%3A//www.random.org/">Random.org </a>为互联网提供真正的随机数。他们提供的服务包括真正的抛硬币随机、骰子随机和卡牌洗牌随机等。</p>
</blockquote>
<p>上述的随机数生成器方法大多后来都无人问津了，但一个叫做梅森旋转随机数生成器的软件PRNG鹤立鸡群，这种算法现在依旧是默认的PRNG，其基本思想是基于线性反馈移位寄存器，产生一个循环周期非常长的确定性序列，循环周期能达到2的19937次方-1</p>
<p>（这个算法还没搞明白 想起来再回来更细节）</p>
<p>不过</p>
<blockquote>
<p>在 1999 年，随机数市场发生了一个巨大的变化，Intel 在其 i810 芯片组上集成了芯片级的随机数生成器。这样使得新的服务器都自带热噪声的本地源随机数生成能力——真正的随机数生成器（TRNG）。这很伟大，但是它始终没有软件 PRNG 快，所以加密软件依旧不得不依赖于伪随机数生成器（PRNG）。</p>
</blockquote>
<p>此处的思路与Unix内核中的随机数发生器看起来有点相似，但没有深入研究，稍微引进一下</p>
<blockquote>
<p>具体来讲，Unix 维护了一个熵池，不断收集非确定性的设备事件，即机器运行环境中产生的硬件噪音，来作为种子。</p>
<p>比如说，时钟，IO 请求的响应时间，特定硬件中断的时间间隔，键盘敲击速度，鼠标位置变化，甚至周围的电磁波等等……直观地讲，你每按一次键盘，动一下鼠标，邻居家 wifi 信号强度变化，磁盘写入速度等等信号，都可能被用来生成随机数。</p>
<p>更具体的，内核提供了向熵池填充数据的接口，比如鼠标的大概就长成这样：</p>
<pre><code class="language-text">void add_mouse_randomness(__u32 mouse_data) 
</code></pre>
<p>内核子系统和驱动调用这个函数，把鼠标的位置和中断间隔时间作为噪音源填充进熵池。</p>
<p>所以，结论是，程序和算法本身不能产生真随机，但是我们想办法可以迂回产生统计意义上的真随机。</p>
</blockquote>
<p>参考资料：</p>
<ol>
<li>baidu百科 若干名词</li>
<li>知乎 《真正的随机，真的存在吗？》https://baijiahao.baidu.com/s?id=1631825387168788812&amp;wfr=spider&amp;for=pc</li>
<li>bilibili 《【PBS无尽数学】计算机如何生成随机数? 熟肉》 https://www.bilibili.com/video/BV1XW411s7mK?from=search&amp;seid=6920386599790745445</li>
<li>知乎 《电脑取随机数是什么原理，是真正的随机数吗？》 https://www.zhihu.com/question/20423025</li>
<li>知乎 《扒一扒随机数（Random Number）的诞生历史》 https://zhuanlan.zhihu.com/p/25888319</li>
<li>csdn 《随机数生成器与线性同余法产生随机数》 https://blog.csdn.net/qq_31741481/article/details/84703808</li>
<li>csdn 《线性同余发生器-随机数》 https://blog.csdn.net/xminyang/article/details/53302992</li>
<li>知乎 《随机算法线性同余法的理解》 https://zhuanlan.zhihu.com/p/36301602</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「算法」另辟捷径的数字排列方式]]></title>
        <id>https://IamQwQ.github.io/post/numbersArrangement/</id>
        <link href="https://IamQwQ.github.io/post/numbersArrangement/">
        </link>
        <updated>2020-11-10T09:30:43.000Z</updated>
        <content type="html"><![CDATA[<p><strong>本文多数内容转载于b站up主oooooohmygosh与ttttttiger虎的视频 <a href="https://www.bilibili.com/video/BV1zD4y197Qi">传送门</a></strong><br>
本篇内容后续还会更新其原理及其思路研究；；；代码还也没往上写；；（看视频更方便）</p>
<p>我们在对若干数字进行排列的时候总是会先去寻找数列中最小或最大的数字放在数列的最前或最后，就像是这样：</p>
<blockquote>
<p>3 5 8 <em><strong>*1*</strong></em> 2 9 4 7 6<br>
选取最小进行置于队列首位重新排列<br>
1 3 5 8 <em><strong>*2*</strong></em> 9 4 6 7<br>
重复操作<br>
1 2 3 5 8 9 4 6 7<br>
依此类推</p>
</blockquote>
<p>但传统的思路在面对大量的数字时速度就直线下降</p>
<blockquote>
<p>3 5 8 1 2 9 4 7 6<br>
先在数列中选择一个&quot;标准&quot; 此处选择6<br>
3 5 8 1 2 9 4 7 <em><strong>*6*</strong></em><br>
在标准的最左边的数字和最右边的数字进行标记<br>
<u>3</u> 5 8 1 2 9 4 <u>7</u> <em><strong>*6*</strong></em><br>
将左边的标记向右移动，直到标记的数字大于标准时停下<br>
右边的标记向左移动，直到标记的数字小于标准时停下<br>
3 5 <u>8</u> 1 2 9 <u>4</u> 7 <em><strong>*6*</strong></em><br>
此时将两个标记位置交换<br>
3 5 <u>4</u> 1 2 9 <u>8</u> 7 <em><strong>*6*</strong></em><br>
再次重复上一过程<br>
3 5 4 1 2 <u>9</u> 8 7 <em><strong>*6*</strong></em><br>
此时两个标记相撞了;;;<br>
如果标记的位置重叠，则将标记的位置与标准的位置交换<br>
3 5 4 1 2 <em><strong>*6*</strong></em> 8 7 <u>9</u><br>
当标准与标记进行位置交换之后，标准的左边就全部都是<br>
小于标准的数字了，同理，右边则都是大于标准的数字<br>
此时设置新的标准<br>
3 5 4 1 <em><strong>*2*</strong></em> 6 8 7 9<br>
重复重复重复(‾◡◝);;</p>
</blockquote>
<p>可见该方法的排序次数之少，效率可想而知</p>
<p>阿...有空把代码试一遍；；；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「我」&「咖啡」]]></title>
        <id>https://IamQwQ.github.io/post/aboutCoffee/</id>
        <link href="https://IamQwQ.github.io/post/aboutCoffee/">
        </link>
        <updated>2020-10-25T17:16:51.000Z</updated>
        <content type="html"><![CDATA[<p>写这篇记录之前，我本想去起笔去写java的东西的，但现在是一个晚上，本来精神不振，混混沉沉，所以生出了买瓶装咖啡的想法，现在一瓶咖啡一块面包下肚，配合网易云食用霎时间精神焕发，据主观推测不出意料的话应该是要过美国人的时间表了..</p>
<blockquote>
<p>“咖啡”一词源自阿拉伯语“قهوة”，意思是“植物饮料”。在世界各地，人们越来越爱喝咖啡。随之而来的“<a href="https://baike.baidu.com/item/%E5%92%96%E5%95%A1%E6%96%87%E5%8C%96">咖啡文化</a>”充满生活的每个时刻。无论在家里、还是在办公室、或是各种社交场合，人们都在品着咖啡、它逐渐与时尚、现代生活、工作和休闲娱乐联系在一起。</p>
</blockquote>
<blockquote>
<p>咖啡豆含有大约100种不同的物质，包括咖啡因、单宁酸、油和氮化合物等，每100克速溶咖啡中，含咖啡因44～100毫克；每100克调制咖啡中，含咖啡因64～124毫克。咖啡是一种兴奋剂，对人体会产生很多影响，它可利尿、刺激中枢神经和呼吸系统、扩大血管、使心跳加速、增强横纹肌的力量以及缓解大脑和肌肉疲劳。</p>
</blockquote>
<p>实实在在的说，接触咖啡的原因是其功能性。虽然很想说是因为其味道独特，入口如何如何，咽下回味又如何如何，但很遗憾，饮用咖啡的绝大多数时候都是觉得需要提神，而且我觉得应该有不会少的人都是因为这个而去喝咖啡的吧。</p>
<p>为什么喝苦咖啡？</p>
<p>喝美式低糖的时候确实很苦，只是一开始的时候会这么想，缘于其功效也比其他咖啡要强的多，所以从接触之后时不时就想整一瓶，后来再喝的时候苦的感受却没有那么强烈了，喝下去的时候确实是苦的，但是却忍不住一口一口再喝下去，难道是觉醒了奇怪的品味属性( ? )，凭心而论，喝的时候没有那么仔细品味。<br>
但实际上这是一个简单而又充满哲学（笑）的原理</p>
<p><strong>当你习惯了，它就是美味了</strong>。</p>
<ul>
<li></li>
</ul>
<p>2020/11/28更</p>
<p>咖啡的用途广泛，其功能性独树一帜，甚至可以凭借他的特性完成一些令人难以想象的操作，比如调整时间差<br>
如果作息紊乱，首先保持清醒<br>
<img src="https://IamQwQ.github.io/post-images/1606501528671.png" alt="" loading="lazy"><br>
一瓶含149mg的美式足够让你保持清醒，咖啡的半衰期是四个小时，则可以凭借这一特性预先计算好时间使用咖啡（一般为6~7个小时之前）则可以让你在预计的时间在床上呼呼大睡，原理则是凭借<a href="https://iamqwq.github.io/post/polyhedronCoffeinePrinciple/">之前这篇文章所述</a></p>
<p>（本来想来更一些有意思的故事的，结果又变成了经验之谈和科普 😄）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「Java」 Swing]]></title>
        <id>https://IamQwQ.github.io/post/javaSwingAssembly/</id>
        <link href="https://IamQwQ.github.io/post/javaSwingAssembly/">
        </link>
        <updated>2020-10-21T08:20:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="swing基本介绍">Swing基本介绍</h2>
<p>awt是java1.0中的基础类(抽象窗口工具箱) 为了给程序员构建一个通用的gui使其能够在所有的平台上运行，但没有达到预期的效果，所以有了swing</p>
<p>swing不能代替awt，所以swing和awt是需要同时出现在一个图形用户界面当中</p>
<h3 id="swing组件特点">swing组件特点</h3>
<blockquote>
<p>轻量级</p>
<p>可插入外观组件</p>
</blockquote>
<h2 id="swing的常用窗体及其常用方法">Swing的常用窗体及其常用方法</h2>
<p>窗体是各个组件的载体，下图为组件和窗体的关系</p>
<figure data-type="image" tabindex="1"><img src="https://IamQwQ.github.io/post-images/1603295667911.png" alt="" loading="lazy"></figure>
<h3 id="jframe窗体">JFrame窗体</h3>
<p>拥有边界和最大化、最小化和关闭的顶层窗口</p>
<pre><code class="language-java">JFrame jf = new JFrame(&quot;this is a test&quot;);
Container container = jf.getContentPane();
</code></pre>
<p>jf是JFrame对象</p>
<p>container是Container对象，可以使用JFrame对象调用getContentPane()方法获取，实际上就是获取当前窗口的内容窗格</p>
<p>swing组件的窗体通常与组件和容器有关，所以JFrame对象创建完成后，需要调用getContentPane() 方法将窗体转换为容器，然后在容器中添加组件或者设置布局管理器</p>
<p>Q：或许如果自己码字会发现，不使用getContentPane()也是可以直接添加组件的阿，那么getContentPane()方法的意义何在呢？<br>
A：<a href="https://IamQwQ.github.io/post/javaSwingAssemblyGetcontentpane/">点击跳转至getContentPane的意义研究</a></p>
<p>容器已经准备好了，此时如果需要把组件添加进容器的话可以使用Container类的add方法</p>
<pre><code class="language-java">Button testButton = new Button(&quot;test button&quot;);
container.add(testButton);
</code></pre>
<p>阿 常用的方法有空再补上</p>
<p><code>以下是一个swing显示图片的实例</code></p>
<pre><code class="language-java">import javax.swing.*
import java.awt.*

public class test{
    public static void main(String[] args){
        
    }
    public static void newwindows(String title){
        //创建JFrame对象
        JFrame jf = new JFrame(title);
        //转换为内容窗口对象 
        //(此处设置颜色使用container对象的原因是rootpane显示在最上层 所以要通过内容窗格来设置颜色)
        Container container = jf.getContentPane();
        
        //窗口设置
        //设置窗口关闭方式
        jf.setDefaultCloseOperation(WindowConstant.Exit_On_Close);
        //设置窗口窗顶栏不可见 (设置不加修饰)
        jf.setUndecorated(true);
        //设置窗口可见
        jf.setVisible(true);
        //设置窗口透明程度
        jf.setOpacity(0.5);
        //窗口颜色
        container.setBackground(Color.black);
        
        //组件设置
        //创建JLable标签
        JLable jl = new JLable();
        //创建imageicon对象用来创建icon图符
        ImageIcon icon = new ImageIcon(url[此处指url变量]);
        //seticon方法将icon添加至jl中
        jl.setIcon(icon);
        //将jl添加至容器中
        container.add(jl);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TestPage]]></title>
        <id>https://IamQwQ.github.io/post/testpage/</id>
        <link href="https://IamQwQ.github.io/post/testpage/">
        </link>
        <updated>2020-10-21T04:47:55.000Z</updated>
        <content type="html"><![CDATA[<p>&quot;test test&quot;</p>
<blockquote>
<p>markdown is ready</p>
</blockquote>
]]></content>
    </entry>
</feed>